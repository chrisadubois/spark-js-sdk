import {assert} from '@webex/test-helper-chai';

import testUtils from './testUtils';


require('dotenv').config();

const sparkTestUsers = require('./sparkTestUsers');

let userSet, alice, bob, chris;
// TODO: Merge all the test it sections into one

describe('plugin-meeting', () => {
  before(() => sparkTestUsers.generateTestUsers({count: 3})
    .then((users) => {
      userSet = users;
      alice = userSet[0];
      bob = userSet[1];
      chris = userSet[2];
      alice.name = 'alice';
      bob.name = 'bob';
      alice.spark.meetings.name = 'alice';
      bob.spark.meetings.name = 'bob';
    })
    .then(() => Promise.all([testUtils.syncAndEndMeeting(alice),
      testUtils.syncAndEndMeeting(bob)]))
    .catch((error) => {
      console.log(error);
    }));

  after(() => {
    const promise = [];

    userSet.forEach((user) => {
      promise.push(user.spark.internal.mercury.disconnect());
    });

    return Promise.all(promise)
      .then(() => sparkTestUsers.remove(userSet));
    // TODO: end is not a function on browser object
  });

  // Alice calls bob and bob rejects it
  describe('End outgoing Call', () => {
    after(() => {
      alice.meeting = null;
      bob.meeting = null;
    });

    it('Alice Ends a outgoing meeting', () => Promise.all([
      testUtils.delayedPromise(alice.spark.meetings.create(bob.emailAddress)),
      testUtils.waitForEvents([{scope: alice.spark.meetings, event: 'meeting:added', user: alice}])
    ])
      .then(() => Promise.all([
        testUtils.delayedPromise(alice.meeting.join()),
        testUtils.waitForEvents([{scope: bob.spark.meetings, event: 'meeting:added', user: bob}])
      ]))
      .then(() => {
        // bob and alice have meeting object
        bob.meeting.acknowledge('INCOMING');
        assert.equal(bob.meeting.sipUri, alice.emailAddress);
        assert.equal(alice.meeting.sipUri, bob.emailAddress);
        assert.equal(bob.meeting.state, 'IDLE');
        assert.equal(alice.meeting.state, 'JOINED');
      })
      .then(function aliceLeavesMeetingAndBobGetsMeetingRemoved() {
        return Promise.all([
          testUtils.delayedPromise(alice.meeting.leave()),
          testUtils.waitForEvents([{scope: bob.spark.meetings, event: 'meeting:removed', user: bob}])
        ]);
      })
      .then(() => testUtils.waitForStateChange(alice.meeting, 'LEFT'))
      .then(() => Promise.all([
        testUtils.waitForCallEnded(alice, bob.emailAddress),
        testUtils.waitForCallEnded(bob, alice.emailAddress)
      ]))
      .then(() => {
        assert.equal(alice.spark.meetings.getMeetingByType('sipUri', bob.emailAddress), null);
        assert.equal(bob.spark.meetings.getMeetingByType('sipUri', alice.emailAddress), null);
      })
      .catch((err) => {
        console.log('ERROR JOIN ', err);
        throw err;
      }));
  });

  // The event was coming but incomplete
  // 1) Test user doesnt have locus tag information

  // Alice calls bob and bob rejects it
  describe('reject Incoming Call', () => {
    it('alice dials bob and bob receives meeting added', () => Promise.all([
      testUtils.delayedPromise(alice.spark.meetings.create(bob.emailAddress)),
      testUtils.waitForEvents([{scope: alice.spark.meetings, event: 'meeting:added', user: alice}])
    ])
      .then(() => Promise.all([
        testUtils.delayedPromise(alice.meeting.join()),
        testUtils.waitForEvents([{scope: bob.spark.meetings, event: 'meeting:added', user: bob}])
      ]))
      .then(function alicebobJoined() {
        assert.exists(bob.meeting);
        assert.exists(alice.meeting);
        assert.equal(bob.meeting.sipUri, alice.emailAddress);
        assert.equal(alice.meeting.sipUri, bob.emailAddress);
        assert.exists(bob.meeting.partner);
        assert.exists(alice.meeting.partner);
      })
      .then(function bobState() {
        testUtils.waitForStateChange(bob.meeting, 'IDLE');
      })
      .then(function aliceState() {
        testUtils.waitForStateChange(alice.meeting, 'JOINED');
      })
      .then(function bobDeclinedCall() {
        return bob.meeting.acknowledge('INCOMING')
          .then(() => bob.meeting.decline('BUSY'))
          .then(() => testUtils.waitForStateChange(bob.meeting, 'DECLINED'))
          .catch((e) => { console.error('Bob decline call not successful', e); throw e; });
      })
      .then(function aliceLeaveMeeting() {
        assert.equal(alice.meeting.state, 'JOINED');

        return alice.meeting.leave()
          .then(() => testUtils.waitForStateChange(alice.meeting, 'LEFT'))
          .then(() => testUtils.waitForStateChange(bob.meeting, 'DECLINED'))
          .catch((e) => { console.error('alice was not able to leave the meeting', e); throw e; });
      })
      .then(function WaitForMeetingEnd() {
        return Promise.all([
          testUtils.waitForCallEnded(alice, bob.emailAddress),
          testUtils.waitForCallEnded(bob, alice.emailAddress)
        ])
          .then(() => {
            assert.equal(alice.spark.meetings.getMeetingByType('sipUri', bob.emailAddress), null);
            assert.equal(bob.spark.meetings.getMeetingByType('sipUri', alice.emailAddress), null);
          })
          .catch((e) => { console.error('Alice bob meeting is deleted', e); throw e; });
      }));
  });

  // Alice calls bob and bob rejects it
  describe('Successful 1:1 meeting (including Guest)', () => {
    it('No previous Call', () => {
      assert.equal(Object.keys(bob.spark.meetings.getAllMeetings()), 0);
      assert.equal(Object.keys(alice.spark.meetings.getAllMeetings()), 0);
    });

    it('alice dials bob and bob receives meeting added', () => Promise.all([
      testUtils.delayedPromise(alice.spark.meetings.create(bob.emailAddress)),
      testUtils.waitForEvents([{scope: alice.spark.meetings, event: 'meeting:added', user: alice}])
    ])
      .then(function aliceJoinsMeeting() {
        return Promise.all([
          testUtils.delayedPromise(alice.meeting.join()),
          testUtils.waitForEvents([{scope: bob.spark.meetings, event: 'meeting:added', user: bob}])
        ]);
      })
      .then(() => assert.equal(bob.meeting.partner.state, 'JOINED'))
      .then(function bobJoinsMeeting() {
        bob.meeting.acknowledge('INCOMING');

        return Promise.all([
          testUtils.delayedPromise(bob.meeting.join()),
          testUtils.waitForEvents([{scope: alice.meeting.members, event: 'members:update', user: alice}])
            .then((response) => {
              console.log('MEMBER OBJECT BOB ', JSON.stringify(response[0].result.delta));
              const bobParticipant = response[0].result.delta.updated.find((member) => bob.meeting.members.selfId === member.id);

              assert.equal(bobParticipant.status, 'IN_MEETING');
            })
        ])
          .then(() => testUtils.addMedia(bob))
          .then(() => testUtils.addMedia(alice))
          .catch((e) => console.log('Error joining one_on_one', e));
      })
      .then(function aliceAndBobJoinedType() {
        assert.equal(bob.meeting.sipUri, alice.emailAddress);
        assert.equal(alice.meeting.sipUri, bob.emailAddress);
        assert.exists(alice.meeting.members.locusUrl);
        assert.equal(alice.meeting.type, 'CALL');
        assert.equal(bob.meeting.type, 'CALL');
      })
      .then(function bobState() {
        testUtils.waitForStateChange(bob.meeting, 'JOINED');
      })
      .then(function aliceState() {
        testUtils.waitForStateChange(alice.meeting, 'JOINED');
      })
      .then(function aliceMeetingProperties() {
        // Make sure values exists after join
        assert.exists(alice.meeting.userId);
        assert.exists(alice.meeting.deviceUrl);
        assert.exists(alice.meeting.partner);
        assert.exists(alice.meeting.type);
        assert.exists(alice.meeting.state);
        assert.exists(alice.meeting.guest);
        // assert.exists(alice.meeting.joinedWith);
        assert.exists(alice.meeting.members.selfId);
      })
      .then(() => alice.meeting.muteAudio()
        .then(() => {
          assert.equal(alice.meeting.audio.muted, true);
          // isAudioMuted
        })));

    it('alice adds chris as guest to 1:1 meeting', () => Promise.all([
      testUtils.delayedPromise(alice.meeting.invite({emailAddress: chris.emailAddress})),
      testUtils.waitForEvents([{scope: chris.spark.meetings, event: 'meeting:added', user: chris}]),
      testUtils.waitForEvents([{scope: alice.meeting.members, event: 'members:update'}])
        .then((response) => {
          const chrisParticipant = response[0].result.delta.added.find((member) => chris.emailAddress === member.email);

          assert.equal(chrisParticipant.status, 'NOT_IN_MEETING');
        })
    ])
      .catch((e) => { console.error('Error adding chris as guest ', e); throw e; })
      .then(function memberUpdated() {
        assert.exists(chris.meeting);

        return Promise.all([
          testUtils.delayedPromise(chris.meeting.join()),
          testUtils.waitForEvents([{scope: alice.meeting.members, event: 'members:update'}])
            .then((response) => {
              const chrisParticipant = response[0].result.delta.updated.find((member) => chris.meeting.members.selfId === member.id);

              assert.equal(chrisParticipant.status, 'IN_MEETING');
            })
        ])
          .then(() => {
            assert.equal(alice.meeting.members.membersCollection.get(chris.meeting.members.selfId).participant.state, 'JOINED');
          })
          .then(() => testUtils.waitForStateChange(chris.meeting, 'JOINED'))
          .then(() => testUtils.addMedia(chris));
      })
      .then(() => Promise.all([
        testUtils.delayedPromise(chris.meeting.leave()),
        testUtils.waitForEvents([{scope: alice.meeting.members, event: 'members:update'}])
          .then((response) => {
            console.log('CHRIS RESPONSE ', response[0]);
            const chrisParticipant = response[0].result.delta.updated.find((member) => chris.meeting.members.selfId === member.id);

            assert.equal(chrisParticipant.status, 'NOT_IN_MEETING');
          })
      ]))
      .catch((e) => { console.error('Error chris joining the meeting ', e); throw e; }));

    it('leave on the meeting object', () => Promise.all([
      testUtils.delayedPromise(bob.meeting.leave()),
      testUtils.waitForEvents([
        {scope: alice.meeting.members, event: 'members:update', user: alice},
        {scope: bob.spark.meetings, event: 'meeting:removed', user: bob},
        {scope: alice.spark.meetings, event: 'meeting:removed', user: alice}
      ])
    ])
      .then((response) => {
        assert.equal(bob.meeting, null);
        assert.equal(alice.meeting, null);

        console.log('RESPONSE ALL ', response);
      })
      .then(() => testUtils.waitForCallEnded(bob, alice.emailAddress))
      .then(() => testUtils.waitForCallEnded(alice, bob.emailAddress))
      .then(() => {
        assert.equal(alice.spark.meetings.getMeetingByType('sipUri', bob.emailAddress), null);
        assert.equal(bob.spark.meetings.getMeetingByType('sipUri', alice.emailAddress), null);
      }));
  });
});
