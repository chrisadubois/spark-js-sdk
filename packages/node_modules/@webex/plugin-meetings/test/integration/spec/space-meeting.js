
import {assert} from '@webex/test-helper-chai';

import CMR from './cmr';
import testUtils from './testUtils';

require('dotenv').config();

const sparkTestUsers = require('./sparkTestUsers.js');

let userSet, alice, bob, chris;

describe('plugin-meetings-automation', () => {
  describe('plugin-meeting-space-meeting', () => {
    before(() => sparkTestUsers.generateTestUsers({count: 3})
      .then((users) => {
        userSet = users;
        alice = userSet[0];
        bob = userSet[1];
        chris = userSet[2];
        alice.name = 'alice';
        bob.name = 'bob';
        chris.name = 'chris';
      })
      .then(() => Promise.all([testUtils.syncAndEndMeeting(alice),
        testUtils.syncAndEndMeeting(bob)]))
      .catch((error) => {
        console.log(error);
      }));

    after(() => {
      const promise = [];

      userSet.forEach((user) => {
        promise.push(user.spark.internal.mercury.disconnect());
      });

      return Promise.all(promise)
        .then(() => sparkTestUsers.remove(userSet));
      // TODO: end is not a function on browser object
    });

    describe('Space meeting', () => {
      let space = null;

      it('Alice starts a space meeting', () =>
        alice.spark.internal.conversation.create({participants: [bob, chris]})
          .then((conversation) => {
            assert.lengthOf(conversation.participants.items, 3);
            assert.lengthOf(conversation.activities.items, 1);
            console.log('CONVERSATION', conversation);
            space = conversation;
          })
          .then(function aliceStartsMeeting() {
            return Promise.all([
              testUtils.delayedPromise(alice.spark.meetings.create(space.id)),
              testUtils.waitForEvents([{scope: alice.spark.meetings, event: 'meeting:added', user: alice}])
            ]);
          })
          .then(() => Promise.all([
            testUtils.delayedPromise(alice.meeting.join()),
            testUtils.waitForEvents([
              {scope: bob.spark.meetings, event: 'meeting:added', user: bob},
              {scope: chris.spark.meetings, event: 'meeting:added', user: chris}])
          ])));

      it('Bob and chris joins space meeting', () => testUtils.waitForStateChange(alice.meeting, 'JOINED')
        .then(() => testUtils.waitForStateChange(bob.meeting, 'IDLE'))
        .then(() => testUtils.waitForStateChange(chris.meeting, 'IDLE'))
        .then(() => bob.meeting.join())
        .then(() => chris.meeting.join())
      // add .then checks for alice response, should see bob and chris member status to isInMeeting = true
        .then(() => testUtils.waitForStateChange(bob.meeting, 'JOINED'))
        .then(() => testUtils.waitForStateChange(chris.meeting, 'JOINED')));

      it('Bob and Chris addsMedia', () => testUtils.addMedia(bob)
        .then(() => testUtils.addMedia(alice)));

      it('alice Leaves the meeting', () =>
        Promise.all([
          testUtils.delayedPromise(alice.meeting.leave()),
          testUtils.waitForEvents([{scope: chris.meeting.members, event: 'members:update'}])
            .then((response) => {
              const aliceParticipant = response[0].result.delta.updated.find((member) => alice.meeting.members.selfId === member.id);

              assert.equal(aliceParticipant.status, 'NOT_IN_MEETING');
            })
        ]).then(() => testUtils.waitForStateChange(alice.meeting, 'LEFT')));

      it('bob and chris leave meeting', () => Promise.all([
        testUtils.delayedPromise(bob.meeting.leave()),
        testUtils.waitForEvents([{scope: chris.meeting.members, event: 'members:update'}])
          .then((response) => {
            const bobParticipant = response[0].result.delta.updated.find((member) => bob.meeting.members.selfId === member.id);

            assert.equal(bobParticipant.status, 'NOT_IN_MEETING');
          })
      ]).then(() => testUtils.waitForStateChange(bob.meeting, 'LEFT'))
        .then(() => {
          console.log('CHRIS MEETING', chris.meeting.locusInfo);

          return chris.meeting.leave();
        })
        .then(() => testUtils.waitUntil(4000)));


      it('check for meeting cleanup', () => {
        console.log('Alice ', alice.spark.meetings.getAllMeetings());
        console.log('Bob ', bob.spark.meetings.getAllMeetings());
        console.log('Chris ', chris.spark.meetings.getAllMeetings());
        assert.notExists(alice.spark.meetings.getMeetingByType('correlationId', alice.meeting.correlationId), 'alice meeting exists');
        assert.notExists(bob.spark.meetings.getMeetingByType('correlationId', bob.meeting.correlationId), 'bob meeting exists');
        assert.notExists(chris.spark.meetings.getMeetingByType('correlationId', chris.meeting.correlationId), 'chris meeting exists');
      });
    });
  });

  describe.skip('Unclaimed PMR', () => {
    before(() => sparkTestUsers.generateTestUsers({count: 3})
      .then((users) => {
        userSet = users;
        alice = userSet[0];
        bob = userSet[1];
        chris = userSet[2];
      })
      .then(() => testUtils.syncAndEndMeeting(alice))
      .then(() => CMR.reserve(alice.spark, false))
      .then((cmr) => {
        console.log('CMRR ', cmr);
        alice.cmr = cmr;
      })
      .catch((error) => {
        console.log('WEBEX MEETING error ', error);
      }));

    after(() => {
      const promise = [];

      userSet.forEach((user) => {
        promise.push(user.spark.internal.mercury.disconnect());
      });

      return Promise.all(promise)
        .then(() => CMR.release(alice.spark, alice.cmr.reservationUrl))
        .then(() => sparkTestUsers.remove(userSet));
    });

    describe('Successful meeting', () => {
      it('alice joins the unclaimed PMR as attende', () => {
        Promise.all([
          testUtils.delayedPromise(alice.spark.meetings.create(alice.cmr.sipAddress)),
          testUtils.waitForEvents([{scope: alice.spark.meetings, event: 'meeting:added', user: alice}])
        ])
          .then(() => alice.meeting.join({moderator: false}))
          .then(() => testUtils.waitForStateChange(alice.meeting, 'IDLE'))
          .then(function bobChrisJoiningMeeting() {
            return bob.spark.meetings.create(alice.cmr.sipAddress)
              .then((m) => {
                bob.meeting = m;

                return m.join({moderator: false, hostPin: alice.cmr.responseMetaData.hostPin});
              })
              .then(() => chris.spark.meetings.create(alice.cmr.sipAddress))
              .then((m) => {
                chris.meeting = m;

                return m.join({moderator: false});
              })
              .then(() => testUtils.waitForStateChange(bob.meeting, 'JOINED'))
              .then(() => testUtils.waitForStateChange(chris.meeting, 'JOINED'));
          })
          .then(() => alice.meeting.leave())
          .then(() => testUtils.waitForStateChange(alice.meeting, 'LEFT'))
          .then(() => bob.meeting.leave())
          .then(() => testUtils.waitForStateChange(bob.meeting, 'LEFT'))
          .then(() => chris.meeting.leave())
          .then(() => testUtils.waitForStateChange(chris.meeting, 'LEFT'))
          .then(() => Promise.all([
            testUtils.waitForCallEnded(alice, alice.sipAddress),
            testUtils.waitForCallEnded(bob, alice.sipAddress),
            testUtils.waitForCallEnded(chris, alice.sipAddress)]));
      });

      // it('bob joins with out host pin or moderator', () => {
      //   // either we see meeting info after create or we wait for the error to determine
      // });
    });
  });

  // TODO: fix this . getting 408 conflict for leave
  describe.skip('Claimed PMR', () => {
    before(() => sparkTestUsers.generateTestUsers({count: 3})
      .then((users) => {
        userSet = users;
        alice = userSet[0];
        bob = userSet[1];
        chris = userSet[2];
        alice.name = 'alice';
        // bob.name = 'bob';
      })
      .then(() => testUtils.syncAndEndMeeting(alice))
      .then(() => CMR.reserve(alice.spark, true))
      .then((cmr) => {
        console.log('CMRR ', cmr);
        alice.cmr = cmr;
      })
      .catch((error) => {
        console.log('WEBEX MEETING error ', error);
      }));

    after(() => {
      const promise = [];

      userSet.forEach((user) => {
        promise.push(user.spark.internal.mercury.disconnect());
      });

      return Promise.all(promise)
        .then(() => CMR.release(alice.spark, alice.cmr.reservationUrl))
        .then(() => sparkTestUsers.remove(userSet));
    });

    describe('Successful meeting', () => {
      it('alice starts a space meeting', () => Promise.all([
        testUtils.delayedPromise(alice.spark.meetings.create(alice.cmr.sipAddress)),
        testUtils.waitForEvents([{scope: alice.spark.meetings, event: 'meeting:added', user: alice}])
      ])
        .then(() => alice.meeting.join({moderator: false}))
        .then(() => testUtils.waitForStateChange(alice.meeting, 'JOINED'))
        .then(() => bob.spark.meetings.create(alice.cmr.sipAddress))
        .then((m) => {
          bob.meeting = m;

          return m.join();
        })
        .then(() => testUtils.waitForStateChange(bob.meeting, 'JOINED'))
        .then(function bobChrisJoinMeeting() {
          return chris.spark.meetings.create(alice.cmr.sipAddress)
            .then((m) => {
              chris.meeting = m;

              return m.join({moderator: false});
            })
            .then(() => testUtils.waitForStateChange(chris.meeting, 'JOINED'));
        })
        .then(() => alice.meeting.leave())
        .then(() => bob.meeting.leave())
        .then(() => testUtils.waitForStateChange(alice.meeting, 'LEFT'))
        .then(() => testUtils.waitForStateChange(bob.meeting, 'LEFT'))
        .then(() => chris.meeting.leave())
        .then(() => testUtils.waitForStateChange(chris.meeting, 'LEFT'))
        .then(() => Promise.all([
          testUtils.waitForCallEnded(alice, alice.sipAddress),
          testUtils.waitForCallEnded(bob, alice.sipAddress),
          testUtils.waitForCallEnded(chris, alice.sipAddress)])));
    });
  });
});
