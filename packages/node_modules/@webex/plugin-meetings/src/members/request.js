import {StatelessSparkPlugin} from '@webex/webex-core';

import {MEETINGS} from '../constants';

import MembersUtil from './util';
/**
 * @class MembersRequest
 */
export default class MembersRequest extends StatelessSparkPlugin {
  namespace = MEETINGS;

  /**
   *
   * @param {Object} options with format of {invitee: string, locusUrl: string}
   * @returns {Promise}
   * @throws {Error} if the options are not valid and complete, must have invitee with emailAddress OR email AND locusUrl
   * @memberof MembersRequest
   */
  addMembers(options) {
    if (!(!options || !options.invitee || (!options.invitee.emailAddress || !options.invitee.email) || !options.locusUrl)) {
      throw new Error('invitee must be passed and the associated locus url for this meeting object must be defined.');
    }
    const requestParams = MembersUtil.getAddMemberRequestParams(options);

    return this.request(requestParams);
  }

  /**
   *
   * @param {Object} options
   * @returns {Promise}
   * @throws {Error} if the options are not valid and complete, must have memberIds AND locusUrl
   * @memberof MembersRequest
   */
  admitMember(options) {
    if (!options || !options.locusUrl || !options.memberIds) {
      throw new Error('memberIds must be an array passed and the associated locus url for this meeting object must be defined.');
    }
    const requestParams = MembersUtil.getAdmitMemberRequestParams(options);

    return this.request(requestParams);
  }

  removeMember(options) {
    if (!options || !options.locusUrl || !options.memberId) {
      throw new Error('memberId must be defined, and the associated locus url for this meeting object must be defined.');
    }

    const requestParams = MembersUtil.getRemoveMemberRequestParams(options);

    return this.request(requestParams);
  }

  muteMember(options) {
    if (!options || !options.locusUrl || !options.memberId) {
      throw new Error('memberId must be defined, and the associated locus url for this meeting object must be defined.');
    }

    const requestParams = MembersUtil.getMuteMemberRequestParams(options);

    return this.request(requestParams);
  }
}
