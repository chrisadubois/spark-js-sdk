import {isEmpty} from 'lodash';

import Media from '../media';
import LoggerProxy from '../common/logs/logger-proxy';
import {
  INTENT_TO_JOIN,
  MODERATOR_TRUE,
  MODERATOR_FALSE,
  _JOINED_
} from '../constants';
import IntentToJoinError from '../common/errors/intent-to-join';
import JoinMeetingError from '../common/errors/join-meeting';

const MeetingUtil = {};

MeetingUtil.parseLocusJoin = (response) => {
  const parsed = {};

  // First todo: add check for existance
  parsed.locus = response.body.locus;
  parsed.mediaConnections = response.body.mediaConnections;
  parsed.locusUrl = parsed.locus.url;
  parsed.locusId = parsed.locus.url.split('/').pop();
  parsed.selfId = parsed.locus.self.id;

  // we need mediaId before making roap calls
  parsed.mediaConnections.forEach((mediaConnection) => {
    if (mediaConnection.mediaId) {
      parsed.mediaId = mediaConnection.mediaId;
    }
  });

  return parsed;
};

MeetingUtil.remoteUpdateAudioVideo = (audioMuted, videoMuted, meeting) => {
  if (!meeting) {
    return Promise.reject(new Error('You need a meeting object.'));
  }
  const localMedias = Media.generateLocalMedias(meeting.mediaId, audioMuted, videoMuted);

  if (isEmpty(localMedias)) {
    return Promise.reject(new Error('You need a media id on the meeting to change remote audio.'));
  }

  return meeting.meetingRequest.remoteAudioVideoToggle({
    locusUrl: meeting.locusUrl,
    selfId: meeting.selfId,
    localMedias,
    deviceUrl: meeting.deviceUrl,
    correlationId: meeting.correlationId
  }).then((response) => meeting.locusInfo.onFullLocus(response.body.locus));
};

MeetingUtil.checkShare = (meeting) => {
  if ((meeting.wirelessShare && meeting.isSharing) || meeting.isSharing) {
    return meeting.stopShare();
  }

  return Promise.resolve();
};


// TODO: have locus ignore hostPin if they find out it's my claimed PMR
/*
for my claimed PMR
passing an "undefined" hostPin was causing the issue.
if I don't include hostPin in the first request, locus figures out it's my PMR
and sends a 200 after the first request
so we must clean up the hostPin to stop the double request
*/
MeetingUtil.cleanOptions = (options, info, owner, userId) => {
  if (MeetingUtil.hasOwner(info)) {
    if (MeetingUtil.isOwnerSelf(owner, userId)) {
      if (options.hostPin) {
        delete options.hostPin;
      }
      options.moderator = MODERATOR_TRUE;
    }
    else {
      options.moderator = MODERATOR_FALSE;
    }
  }

  return options;
};

MeetingUtil.hasOwner = (info) => info && info.owner;

MeetingUtil.isOwnerSelf = (owner, selfId) => owner === selfId;

MeetingUtil.isPinOrGuest = (err) => {
  if (err && err.body && err.body.errorCode === INTENT_TO_JOIN) {
    return true;
  }

  return false;
};

MeetingUtil.joinMeeting = (meeting, options) => {
  if (!meeting) {
    return Promise.reject(new Error('You need a meeting object.'));
  }

  // eslint-disable-next-line no-warning-comments
  // TODO: check if the meeting is in JOINING state
  // if Joining state termintate the request as user might click multiple times
  return meeting.meetingRequest
    .joinMeeting({
      sipUri: meeting.sipUri,
      deviceUrl: meeting.deviceUrl,
      locusUrl: meeting.locusUrl,
      correlationId: meeting.id,
      resourceId: meeting.resourceId,
      moderator: options.moderator,
      hostPin: options.hostPin
    })
    .then((res) => MeetingUtil.parseLocusJoin(res));
};

MeetingUtil.cleanUp = (meeting) => meeting.closeLocalStream()
  .then(() => meeting.closeLocalShare())
  .then(() => meeting.closePeerConnections())
  .then(() => {
    meeting.unsetLocalVideoTrack();
    meeting.unsetLocalShareTrack();
    meeting.unsetRemoteStream();
    meeting.unsetPeerConnections();
  })
  .then(() => meeting.roap.stop(meeting.correlationId, meeting.roapSeq));

MeetingUtil.leaveMeeting = (meeting) =>
  MeetingUtil.checkShare(meeting)
    .finally(() => meeting.meetingRequest
      .leaveMeeting({
        locusUrl: meeting.locusUrl,
        selfId: meeting.selfId,
        correlationId: meeting.correlationId,
        resourceId: meeting.resourceId || null,
        deviceUrl: meeting.deviceUrl
      }))
    .then((response) => {
      if (response && response.body && response.body.locus) {
        return meeting.locusInfo.onFullLocus(response.body.locus);
      }

      return Promise.resolve();
    })
    .then(() => MeetingUtil.cleanUp(meeting))
    .then(() => Promise.resolve())
    .catch((err) => {
      LoggerProxy.logger.error(`MeetingUtil->leaveMeeting#An error occured while trying to leave meeting with an id of ${meeting.id}, error: ${err}`);

      return Promise.reject(err);
    });

MeetingUtil.declineMeeting = (meeting, reason) => meeting.meetingRequest
  .declineMeeting({
    locusUrl: meeting.locusUrl,
    deviceUrl: meeting.deviceUrl,
    reason
  });

MeetingUtil.isGuestUnjoined = (guest, locusInfo) => guest && locusInfo.parsedLocus && locusInfo.parsedLocus.self && locusInfo.parsedLocus.self.state !== _JOINED_;

MeetingUtil.joinMeetingOptions = (meeting, options) => {
  meeting.resourceId = meeting.resourceId || options.resourceId;
  meeting.setCorrelationId(meeting.id);
  // TODO: this should be removed following locus changes.
  options = MeetingUtil.cleanOptions(options, meeting.meetingInfo, meeting.owner, meeting.userId);

  // normal join meeting, scenario A, D
  return MeetingUtil.joinMeeting(meeting, options)
    .then((response) => {
      meeting.setLocus(response);

      return Promise.resolve();
    })
    .catch((err) => {
      // joining a claimed PMR that is not my own, scenario B
      if (MeetingUtil.isPinOrGuest(err)) {
        if (MeetingUtil.hasOwner(meeting.meetingInfo)) {
          return MeetingUtil.joinMeeting(meeting, options).then((response) => {
            meeting.setLocus(response);

            return Promise.resolve();
          });
        }

        // request host pin or non host for unclaimed PMR, start of Scenario C
        // see https://sqbu-github.cisco.com/WebExSquared/locus/wiki/Locus-Lobby-and--IVR-Feature
        return Promise.reject(new IntentToJoinError(err));
      }
      LoggerProxy.logger.log('Meeting:index#join --> Error joining the call on getLocalMedia, ', err);

      return Promise.reject(new JoinMeetingError(err, options));
    });
};


MeetingUtil.validateOptions = (options) => {
  const {
    sendVideo, sendAudio, sendShare, localStream, localShare
  } = options;

  if (sendVideo && !MeetingUtil.getTrack(localStream).videoTrack) {
    return Promise.reject(new Error('please pass valid video streams'));
  }

  if (sendAudio && !MeetingUtil.getTrack(localStream).audioTrack) {
    return Promise.reject(new Error('please pass valid audio streams'));
  }

  if (sendShare && !MeetingUtil.getTrack(localShare).videoTrack) {
    return Promise.reject(new Error('please pass valid share streams'));
  }

  return Promise.resolve();
};

MeetingUtil.getTrack = (stream) => {
  let audioTrack = null;
  let videoTrack = null;
  let audioTracks = null;
  let videoTracks = null;

  if (!stream) {
    return {audioTrack: null, videoTrack: null};
  }
  if (stream.getAudioTracks) {
    audioTracks = stream.getAudioTracks();
  }
  if (stream.getVideoTracks) {
    videoTracks = stream.getVideoTracks();
  }

  if (audioTracks && audioTracks.length > 0) {
    [audioTrack] = audioTracks;
  }

  if (videoTracks && videoTracks.length > 0) {
    [videoTrack] = videoTracks;
  }

  return {audioTrack, videoTrack};
};

MeetingUtil.getModeratorFromLocusInfo = (locusInfo) =>
  locusInfo &&
  locusInfo.parsedLocus &&
  locusInfo.parsedLocus.info &&
  locusInfo.parsedLocus.info &&
  locusInfo.parsedLocus.info.moderator;

MeetingUtil.canUserRecord = (moderator) => moderator.RECORDING_CONTROL_START;

MeetingUtil.canUserPause = (moderator) => moderator.RECORDING_CONTROL_PAUSE;

MeetingUtil.canUserResume = (moderator) => moderator.RECORDING_CONTROL_RESUME;

MeetingUtil.canUserStop = (moderator) => moderator.RECORDING_CONTROL_STOP;

MeetingUtil.startRecording = (request, locusUrl, locusInfo) => {
  const moderator = MeetingUtil.getModeratorFromLocusInfo(locusInfo);

  if (moderator && MeetingUtil.canUserRecord(moderator)) {
    return request.recordMeeting({locusUrl, recording: true, paused: false});
  }

  return Promise.reject(new Error('Start recording not allowed.'));
};

MeetingUtil.pauseRecording = (request, locusUrl, locusInfo) => {
  const moderator = MeetingUtil.getModeratorFromLocusInfo(locusInfo);

  if (moderator && MeetingUtil.canUserPause(moderator)) {
    return request.recordMeeting({locusUrl, recording: true, paused: true});
  }

  return Promise.reject(new Error('Pause recording not allowed.'));
};

MeetingUtil.resumeRecording = (request, locusUrl, locusInfo) => {
  const moderator = MeetingUtil.getModeratorFromLocusInfo(locusInfo);

  if (moderator && MeetingUtil.canUserResume(moderator)) {
    return request.recordMeeting({locusUrl, recording: true, paused: false});
  }

  return Promise.reject(new Error('Resume recording not allowed.'));
};

MeetingUtil.stopRecording = (request, locusUrl, locusInfo) => {
  const moderator = MeetingUtil.getModeratorFromLocusInfo(locusInfo);

  if (moderator && MeetingUtil.canUserStop(moderator)) {
    return request.recordMeeting({locusUrl, recording: false, paused: false});
  }

  return Promise.reject(new Error('Stop recording not allowed.'));
};

export default MeetingUtil;
