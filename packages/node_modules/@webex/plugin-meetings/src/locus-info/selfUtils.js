
import {
  _IDLE_,
  _JOINED_,
  _CALL_
} from '../constants';

const selfUtils = {};

/**
 * parses the relevant values for self: muted, guest, moderator, mediaStatus, state, joinedWith, creator, id
 * @param {Object} self
 * @param {String} deviceId
 * @returns {undefined}
 */
selfUtils.parse = (self, deviceId) => {
  if (self) {
    const parsedSelf = {
      muted: selfUtils.getMuted(self),
      guest: self.guest,
      moderator: self.moderator,
      mediaStatus: selfUtils.getStatus(self.status),
      state: self.state,
      // TODO: give a proper name . With same device as login or different login`
      // Some times we might have joined with both mobile and web
      joinedWith: self.devices.find((device) => deviceId === device.url),
      creator: self.isCreator, // check if its used,
      selfId: self.id,
      selfIdentity: selfUtils.getSelfIdentity(self),
      selfUrl: self.url
    };

    return parsedSelf;
  }

  return null;
};

selfUtils.getSelves = (oldSelf, newSelf, deviceId) => {
  const previous = oldSelf && selfUtils.parse(oldSelf, deviceId);
  const current = newSelf && selfUtils.parse(newSelf, deviceId);

  return {
    previous,
    current,
    updates: {
      isUnadmittedGuest: selfUtils.isUnadmittedGuest(current),
      isAdmittedGuest: selfUtils.isAdmittedGuest(previous, current)
    }
  };
};

/**
 * get the id from the self object
 * @param {Object} self
 * @returns {String}
 */
selfUtils.getSelfIdentity = (self) => {
  if (!self && !self.person) {
    return null;
  }

  return self.person.id;
};

/**
 * get the muted property from the self object
 * @param {Object} self
 * @returns {Boolean}
 */
selfUtils.getMuted = (self) => {
  if (!self || !self.controls || !self.controls.audio) {
    return null;
  }

  return self.controls.audio.muted;
};

selfUtils.getStatus = (status) => ({
  audio: status.audioStatus,
  video: status.videoStatus,
  slides: status.videoSlidesStatus
});

/**
 * @param {Object} check
 * @returns {Boolean}
 */
selfUtils.isLocusGuestUnadmitted = (check) => check && check.guest && check.state === _IDLE_;

/**
 * @param {Object} check
 * @returns {Boolean}
 */
selfUtils.isLocusGuestAdmitted = (check) => check && check.guest && check.state === _JOINED_;

/**
 * @param {Object} self
 * @returns {Boolean}
 * @throws {Error} when self is undefined
 */
selfUtils.isUnadmittedGuest = (self) => {
  if (!self) {
    throw new TypeError('self must be defined to determine if self is unadmitted as guest.');
  }

  return selfUtils.isLocusGuestUnadmitted(self);
};

/**
 * @param {Object} oldSelf
 * @param {Object} changedSelf
 * @returns {Boolean}
 * @throws {Error} if changed self was undefined
 */
selfUtils.isAdmittedGuest = (oldSelf, changedSelf) => {
  if (!oldSelf) {
    // if there was no previous locus, it couldn't have been admitted yet
    return false;
  }
  if (!changedSelf) {
    throw new TypeError('New self must be defined to determine if self transitioned to admitted as guest.');
  }

  return selfUtils.isLocusGuestUnadmitted(oldSelf) && selfUtils.isLocusGuestAdmitted(changedSelf);
};

/**
 * extract the sipUrl from the partner
 * @param {Object} partner
 * @param {Object} info
 * @returns {Object}
 */

selfUtils.getSipUrl = (partner, type, sipUri) => {
  // For webex meeting the sipUrl gets updated in info parser
  if (partner && type === _CALL_) {
    return {sipUri: partner.person.sipUrl || partner.person.emailAddress || partner.person.email};
  }

  return {sipUri};
};


export default selfUtils;

