
const InfoUtils = {};

InfoUtils.parse = (info) => ({
  policy: InfoUtils.parsePolicy(info),
  sipUri: info.sipUri,
  moderator: InfoUtils.parseModerator(info)
});
InfoUtils.parsePolicy = (info) => {
  const policy = {};

  // Parses the policy to show valid uses
  if (info.displayHints && info.displayHints.joined && info.displayHints.joined.length > 0) {
    // TODO: find a better way
    info.displayHints.joined.forEach((key) => {
      policy[key] = true;
    });
  }

  return policy;
};

InfoUtils.parseModerator = (info) => {
  const moderator = {};

  if (info.displayHints && info.displayHints.moderator && info.displayHints.moderator.length > 0) {
    info.displayHints.moderator.forEach((key) => {
      moderator[key] = true;
    });
  }

  return moderator;
};

InfoUtils.isLocked = (current) => current.policy.LOCK_STATUS_LOCKED;

InfoUtils.isUnlocked = (current) => current.policy.LOCK_STATUS_UNLOCKED;

InfoUtils.getInfos = (oldInfo, newInfo) => {
  const previous = oldInfo && InfoUtils.parse(oldInfo);
  const current = newInfo && InfoUtils.parse(newInfo);

  return {
    previous,
    current,
    updates: {
      isLocked: InfoUtils.isLocked(current),
      isUnlocked: InfoUtils.isUnlocked(current)
    }
  };
};

export default InfoUtils;
