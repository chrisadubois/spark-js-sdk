
/**
 * @description MQAProcessor handles interval data for MQA
 * @export
 * @class MQAProcessor
 */
class MQAProcessor {
  /**
     * @constructor
     * @public
     * @memberof Meetings
     */
  constructor() {
    this.data = {};
    this.ready = false;
    this.intervalNumber = 0;
  }

  process(id, interval) {
    switch (id) {
      case 'audioReceiver':
        // TODO: calculate them and then go beyond just chrome
        const rtpJitter = interval[0].rtpInAudio.jitter;
        const rtpPackets = interval[0].rtpInAudio.packetsReceived;
        const receivedBitrate = interval[0].rtcCandidatePairAudio.availableIncomingBitrate;
        const rtpEndToEndLost = interval[0].rtpInAudio.packetsLost;
        const audioReceive = {};

        audioReceive.common = {
          common: {}
        };
        audioReceive.streams = [{
          audioqoem: {
            version: -1,
            averageNetMOS: -1,
            minNetMOS: -1,
            averageJitterMOS: rtpJitter, // TODO: actually average
            minJitterMOS: rtpJitter // TODO: actually get min
          },
          common: {
            codec: '',
            concealedFrames: -1,
            csi: [],
            maxConcealRunLength: -1,
            optimalBitrate: 64000,
            optimalFrameRate: -1,
            receivedBitrate,
            receivedFrameRate: -1,
            renderedFrameRate: -1,
            requestedBitrate: -1,
            requestedFrameRate: -1,
            rtpEndToEndLost,
            rtpJitter,
            rtpPackets,
            ssci: -1
          }
        }];
        this.data.audioReceive = audioReceive;
        break;
      case 'audioSender':
        break;
      case 'videoSender':

        const videoTransmit = {};
        videoTransmit.common = {
          availableBitrate: -1,
          availableBitrate: 1633320,
          dtlsBitrate: 0,
          dtlsPackets: 0,
          fecBitrate: 33280,
          fecPackets: 470,
          maxBitrate: 5000000,
          queueDelay: 220,
          remoteJitter: 0,
          remoteLossRate: 0.039063,
          remoteReceiveRate: 179568,
          roundTripTime: 516,
          rtcpBitrate: 21786,
          rtcpPackets: 309,
          rtpBitrate: 55304,
          rtpPackets: 959,
          stunBitrate: 7200,
          stunPackets: 60,
          transportType: 'UDP',
          common: {},
          streams: [{
            common: {
              codec: 'H264',
              duplicateSsci: 41,
              requestedBitrate: 100000,
              requestedFrames: 3000,
              rtpPackets: 958,
              ssci: 1,
              transmittedBitrate: 54666,
              transmittedFrameRate: 1521
            }
          }]
        };
        break;
      default:
        break;
    }
    if (Object.keys(this.data).length >= 2) {
      this.ready = true;
    }
  }

  isReady() {
    return this.ready;
  }

  getData() {
    this.intervalNumber += 1;

    return {...this.data, intervalNumber: this.intervalNumber};
  }
}

export default MQAProcessor;
