
/**
 * @description MQAProcessor handles interval data for MQA
 * @export
 * @class MQAProcessor
 */
class MQAProcessor {
  /**
     * @constructor
     * @public
     * @memberof Meetings
     */
  constructor() {
    this.data = {};
    this.ready = false;
    this.intervalNumber = 0;
  }

  process(id, interval) {
    let rtpJitter, rtpPackets, rtpEndToEndLost, transmittedFrameRate;

    switch (id) {
      // case 'audioReceiver':
      //   // TODO: calculate them and then go beyond just chrome
      //   rtpJitter = interval[0].rtpInAudio.jitter;
      //   rtpPackets = interval[0].rtpInAudio.packetsReceived;
      //   // const receivedBitrate = interval[0].rtcCandidatePairAudio.availableIncomingBitrate;
      //   rtpEndToEndLost = interval[0].rtpInAudio.packetsLost;
      //   const audioReceive = {};

      //   audioReceive.common = {
      //     common: {}
      //   };
      //   audioReceive.streams = [{
      //     audioqoem: {
      //       version: -1,
      //       averageNetMOS: -1,
      //       minNetMOS: -1,
      //       averageJitterMOS: rtpJitter, // TODO: actually average
      //       minJitterMOS: rtpJitter // TODO: actually get min
      //     },
      //     common: {
      //       codec: '',
      //       concealedFrames: -1,
      //       csi: [],
      //       maxConcealRunLength: -1,
      //       optimalBitrate: 64000,
      //       optimalFrameRate: -1,
      //       receivedBitrate: -1,
      //       receivedFrameRate: -1,
      //       renderedFrameRate: -1,
      //       requestedBitrate: -1,
      //       requestedFrameRate: -1,
      //       rtpEndToEndLost,
      //       rtpJitter,
      //       rtpPackets,
      //       ssci: -1
      //     }
      //   }];
      //   this.data.audioReceive = audioReceive;
      //   break;
      case 'shareSender':
        const videoTransmit = {};

        rtpPackets = interval[0].rtpOutVideo.packetsSent;
        transmittedFrameRate = interval[0].rtcOutVideo.framesSent / 30;

        videoTransmit.common = {
          availableBitrate: -1,
          dtlsBitrate: -1,
          dtlsPackets: -1,
          fecBitrate: -1,
          fecPackets: -1,
          maxBitrate: -1,
          queueDelay: -1,
          remoteJitter: -1,
          remoteLossRate: -1,
          remoteReceiveRate: -1,
          roundTripTime: -1,
          rtcpBitrate: -1,
          rtcpPackets: -1,
          rtpBitrate: -1,
          rtpPackets: -1,
          stunBitrate: -1,
          stunPackets: -1,
          transportType: 'UDP',
          common: {
            isMain: false
          },
          streams: [{
            common: {
              codec: '',
              duplicateSsci: -1,
              requestedBitrate: -1,
              requestedFrames: -1,
              rtpPackets,
              ssci: -1,
              transmittedBitrate: -1,
              transmittedFrameRate
            }
          }]
        };
        this.data.videoTransmit = videoTransmit;
        break;
      default:
        break;
    }
    // stubbed TODO:
    this.data.videoReceive = [];
    this.data.audioTransmit = [];
    this.data.audioReceive = [];
    if (Object.keys(this.data).length >= 4) {
      this.ready = true;
    }
  }

  isReady() {
    return this.ready;
  }

  getData() {
    this.intervalNumber += 1;

    return {...this.data, intervalNumber: this.intervalNumber};
  }
}

export default MQAProcessor;
