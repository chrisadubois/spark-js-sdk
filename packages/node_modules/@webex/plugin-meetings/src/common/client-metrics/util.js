import {METRIC_TYPES} from '../../constants';

const ClientMetricsUtil = {};

ClientMetricsUtil.transformOperational = (payload) => {
  const tags = {};
  const fields = {};

  // TODO: we need to change this logic to be of a whitelist format
  // due to issues with low cardinality and indexing in influx
  // also we will have to use this to help consider with behavioral amplitude
  // metrics where another whitelist is used from the config.yaml in configuration
  Object.keys(payload).forEach((key) => {
    const value = payload[key];

    switch (typeof value) {
      case 'number':
        fields[key] = value;
        break;
      case 'boolean':
      case 'string':
      case 'undefined':
      default:
        tags[key] = value;
        break;
      case 'symbol':
      case 'function':
      case 'object':
        // typeof null === 'object'. Yay JavaScript!
        if (value === null) {
          tags[key] = value;
        }
        else {
          throw new Error('ClientMetrics->transformOperational#While parsing payload, object, function, or symbol found when expecting flat value');
        }
    }
  });

  return {
    type: METRIC_TYPES.OPERATIONAL,
    tags,
    fields
  };
};

export default ClientMetricsUtil;
