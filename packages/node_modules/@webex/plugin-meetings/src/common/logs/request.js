import uuid from 'uuid';
import {StatelessWebexPlugin} from '@webex/webex-core';

import ClientMetrics from '../client-metrics';
import {METRICS, METRIC_TYPES} from '../../constants';
import LoggerProxy from '../logs/logger-proxy';
/**
 * @class MeetingRequest
 */
export default class LogsRequest extends StatelessWebexPlugin {
  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   * @param {ClientMetrics} metrics
   */
  constructor(attrs, options, metrics = new ClientMetrics(attrs, options)) {
    super({}, options);
    this.metrics = metrics;
  }

  uploadLogs(options = {payload: {value: METRICS.OPERATIONAL.LOGS_UPLOAD.VALUES.USER_INITIATED_LOGS_UPLOAD}}) {
    const id = options.feedbackId || uuid.v4();

    LoggerProxy.logger.info(`LogsRequest->uploadLogs# uploading user logs with feedbackId: ${id}`);
    this.metrics.submit(METRICS.OPERATIONAL.LOGS_UPLOAD.KEY, METRIC_TYPES.OPERATIONAL, options.payload);

    this.webex.internal.support.submitLogs({feedbackId: id});

    return id;
  }
}
