import {forEach, isFinite, isArray, isSet, isEmpty} from 'lodash';

const StatsAnalyzer = {};

// {valid: true/false, failed: [ { indices: [number] } ], data: { property: { valid: true/false, reports: [ { value: number, valid: true/false, difference: number } ] } } }
StatsAnalyzer.analyze = (series, options = {properties: new Set(['bytesSent', 'bytesReceived'])}) => {
  if (!isArray(series) || !series.length || !options || !isSet(options.properties) || isEmpty(options.properties)) {
    throw new Error('analyzer->analyze#series must be defined as a nonempty array of WebRTCData objects, and options.properties must be a nonempty set of strings, representing the properties to analyze.');
  }
  const analysis = {valid: true, failed: [], data: {}};

  options.properties.forEach((property) => {
    analysis.data[property] = {valid: true, reports: []};
    analysis.failed[property] = {indices: []};
    let previous = {value: 0};
    let index = 0;

    for (let i = series.length - 1; i > 0; i -= 1) {
      const singular = {};

      forEach(series[i].data.getData(), (webrtcData) => { // eslint-disable-line
        const value = webrtcData[property];

        if (!value || !isFinite(value)) {
          return;
        }
        singular.value = value;
        singular.difference = 0;
        singular.valid = false;
        singular.index = index;
        singular.difference = singular.value - previous.value;
        if (singular.difference > 0) {
          singular.valid = true;
        }
        if (!singular.valid) {
          analysis.data[property].valid = false;
          analysis.valid = false;
          analysis.failed[property].indices.push(i);
        }
        previous = singular;
        analysis.data[property].reports.push(singular);
      });
      index += 1;
    }
    if (!analysis.data[property].valid) {
      analysis.valid = false;
    }
  });

  return analysis;
};

export default StatsAnalyzer;
